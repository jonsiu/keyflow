@startuml KeyFlow Layered Architecture
!theme plain

title KeyFlow - Layered Architecture (Separation of Concerns)

skinparam componentStyle rectangle
skinparam packageStyle rectangle

' Presentation Layer
package "PRESENTATION LAYER\n(packages/shared-ui, apps/*/pages)" <<Rectangle>> {
  component "React Components" {
    [TypingInterface.tsx]
    [VirtualKeyboard.tsx]
    [Dashboard.tsx]
    [ProgressCharts.tsx]
    [MetricsDisplay.tsx]
  }
  
  note right
    <b>Responsibilities:</b>
    - UI rendering
    - User interaction handling
    - Visual feedback
    - Component state (UI only)
    
    <b>Rules:</b>
    - No business logic
    - No direct data access
    - Uses Facade for simplicity
  end note
}

' State Management Layer
package "STATE MANAGEMENT LAYER\n(apps/*/stores)" <<Rectangle>> {
  component "Zustand Stores" {
    [TypingStore]
    [ProgressStore]
    [SettingsStore]
    [UserStore]
  }
  
  component "Middleware" {
    [Persistence Middleware]
    [Sync Middleware]
    [Logger Middleware]
  }
  
  note right
    <b>Responsibilities:</b>
    - Application state
    - State mutations
    - Cross-cutting concerns
    
    <b>Rules:</b>
    - Uses business logic layer
    - No UI concerns
    - Middleware for persistence
  end note
}

' Business Logic Layer
package "BUSINESS LOGIC LAYER\n(packages/shared-core)" <<Rectangle>> {
  component "Core Services" {
    [TypingSessionFacade]
    [InputValidator]
    [MetricsCalculator]
    [KeystrokeTracker]
    [WrongKeyTracker]
    [WeakSpotDetector]
  }
  
  component "Practice Modes" {
    [LessonMode]
    [PracticeMode]
    [DrillMode]
    [ChallengeMode]
  }
  
  component "Validation Strategies" {
    [StrictValidationStrategy]
    [LenientValidationStrategy]
  }
  
  note right
    <b>Responsibilities:</b>
    - Core typing algorithms
    - WPM/accuracy calculations
    - Validation rules
    - Error analysis
    - AI/ML logic
    
    <b>Rules:</b>
    - Platform-agnostic (pure TypeScript)
    - No React dependencies
    - No storage dependencies
    - 100% unit testable
  end note
}

' Data Access Layer
package "DATA ACCESS LAYER\n(apps/*/adapters)" <<Rectangle>> {
  component "Storage Adapters" {
    [TauriStorageAdapter]
    [RESTStorageAdapter]
    [LocalStorageAdapter]
  }
  
  component "Repositories" {
    [SessionRepository]
    [UserRepository]
    [ExerciseRepository]
  }
  
  component "API Clients" {
    [AuthClient]
    [SessionClient]
    [ProgressClient]
  }
  
  note right
    <b>Responsibilities:</b>
    - Data persistence
    - API communication
    - Storage abstraction
    - Cache management
    
    <b>Rules:</b>
    - Implements interfaces from types layer
    - Platform-specific implementations
    - Handles sync conflicts
  end note
}

' Infrastructure Layer
package "INFRASTRUCTURE LAYER\n(apps/*/src-tauri, backend/)" <<Rectangle>> {
  component "Desktop Infrastructure" {
    [Tauri Commands]
    [Tauri Store Plugin]
    [System APIs]
    [Native Modules]
  }
  
  component "Backend Infrastructure" {
    [REST API Routes]
    [Database (PostgreSQL)]
    [Cache (Redis)]
    [Authentication]
  }
  
  note right
    <b>Responsibilities:</b>
    - OS/platform integration
    - Database operations
    - Network communication
    - System-level APIs
    
    <b>Rules:</b>
    - Platform-specific
    - No business logic
    - Performance optimized
  end note
}

' Cross-Cutting Layer
package "CROSS-CUTTING CONCERNS\n(packages/shared-types)" <<Rectangle>> {
  component "Type Definitions" {
    [Interfaces]
    [Type Aliases]
    [Enums]
    [Constants]
  }
  
  note right
    <b>Responsibilities:</b>
    - Shared type definitions
    - Interface contracts
    - Constants
    
    <b>Rules:</b>
    - No implementations
    - Pure type definitions
    - Shared across all layers
  end note
}

' Dependencies (top-down)
[React Components] --> [Zustand Stores] : uses
[Zustand Stores] --> [Core Services] : uses
[Core Services] --> [Storage Adapters] : uses (via interfaces)
[Core Services] --> [Repositories] : uses (via interfaces)
[Storage Adapters] --> [Desktop Infrastructure] : implements
[Storage Adapters] --> [Backend Infrastructure] : implements
[API Clients] --> [Backend Infrastructure] : calls

' Type dependencies
[React Components] ..> [Type Definitions] : imports
[Zustand Stores] ..> [Type Definitions] : imports
[Core Services] ..> [Type Definitions] : imports
[Storage Adapters] ..> [Type Definitions] : implements
[Repositories] ..> [Type Definitions] : implements

' Key interactions
note as N1
  <b>Dependency Rule</b>
  Inner layers know nothing about outer layers.
  Dependencies point inward.
  
  Example:
  Business Logic ✗ cannot depend on → UI
  UI ✓ can depend on → Business Logic
end note

note as N2
  <b>Hot Path vs Cold Path</b>
  
  <b>Hot Path (<2ms)</b>
  UI → State → Business Logic
  - Keystroke validation
  - Metrics calculation
  - Real-time updates
  
  <b>Cold Path (debounced)</b>
  Business Logic → Data Access → Infrastructure
  - Session saves
  - Cloud sync
  - Analytics
end note

@enduml

