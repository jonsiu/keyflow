@startuml KeyFlow High-Level Architecture
!theme plain

title KeyFlow - High-Level System Architecture

skinparam componentStyle rectangle
skinparam defaultFontSize 12

' User Layer
actor "User" as user

' Client Applications
package "Client Applications" {
  component "Desktop App\n(Tauri + React 18)" as desktop {
    [WebView]
    [Rust Native Layer]
  }
  
  component "Web App\n(Next.js 15 + React 19)" as web {
    [Browser Client]
  }
}

' Shared Packages
package "Shared Packages\n(90% Code Reuse)" {
  component "shared-ui" {
    [TypingInterface]
    [VirtualKeyboard]
    [Dashboard]
    [Charts & Visualizations]
  }
  
  component "shared-core" {
    [InputValidator]
    [MetricsCalculator]
    [KeystrokeTracker]
    [WrongKeyTracker]
    [Session Manager]
  }
  
  component "shared-types" {
    [TypeScript Interfaces]
    [Type Definitions]
  }
}

' Storage Layer
package "Storage Layer" {
  database "Tauri Store\n(Local, Desktop)" as tauristore
  database "PostgreSQL\n(Cloud)" as postgres
  database "Redis\n(Cache)" as redis
}

' Backend API
package "Backend Services" {
  component "REST API\n(Node.js + Express)" as api {
    [Auth Service]
    [Session Service]
    [Progress Service]
    [Analytics Service]
  }
  
  component "Authentication\n(Clerk/Supabase)" as auth
}

' External Services
cloud "External Services" {
  component "CDN\n(Vercel Edge)" as cdn
  component "Object Storage\n(S3/R2)" as storage
  component "Error Tracking\n(Sentry)" as sentry
  component "Analytics\n(PostHog)" as analytics
}

' User interactions
user --> desktop : Uses native app
user --> web : Uses browser

' Desktop app connections
desktop --> shared-ui : Imports
desktop --> shared-core : Imports
desktop --> shared-types : Imports
desktop --> tauristore : "Local-first\n(100% offline)"
desktop ..> api : "Optional sync\n(when online)"

' Web app connections
web --> shared-ui : Imports
web --> shared-core : Imports
web --> shared-types : Imports
web --> cdn : Served by
web --> api : "Cloud-required\n(REST calls)"

' Shared packages relationships
shared-ui --> shared-core : Uses
shared-ui --> shared-types : Uses
shared-core --> shared-types : Uses

' API connections
api --> postgres : Reads/Writes
api --> redis : Caching
api --> auth : Authentication
api --> storage : "Exercise content\nUser exports"
api --> sentry : "Error reporting"
api --> analytics : "Usage tracking"

' Data sync
tauristore ..> api : "Background sync\n(debounced)"
api --> postgres : Persists

note right of desktop
  <b>Performance Targets</b>
  - Startup: <0.5s
  - Keystroke latency: <2ms
  - Memory: <150 MB
  - Bundle: <20 MB
  
  <b>Key Features</b>
  - 100% offline functional
  - Native OS integration
  - System tray
  - Auto-updates
end note

note right of web
  <b>Performance Targets</b>
  - First Contentful Paint: <1.5s
  - Keystroke latency: <5ms
  - API response: <100ms (p95)
  
  <b>Key Features</b>
  - No installation required
  - Cross-platform (any browser)
  - Cloud-based progress
end note

note bottom of shared-core
  <b>Business Logic (Platform-Agnostic)</b>
  - All typing validation
  - WPM/accuracy calculations
  - Error tracking & analysis
  - Weak spot detection
  
  <b>Pure TypeScript (No React)</b>
  - Zero dependencies on UI frameworks
  - 100% testable
  - Used by both desktop & web
end note

note bottom of api
  <b>Backend Responsibilities</b>
  - User authentication
  - Session persistence
  - Progress tracking
  - Exercise content management
  - Cloud sync coordination
  
  <b>Performance</b>
  - <100ms response (p95)
  - 50+ concurrent users
  - 99.9% uptime
end note

@enduml

