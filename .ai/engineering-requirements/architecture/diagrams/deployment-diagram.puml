@startuml KeyFlow Deployment Architecture
!theme plain

title KeyFlow - Deployment Architecture

' User devices
node "User's Mac\n(macOS 12+)" as mac {
  artifact "KeyFlow.app\n(Tauri Bundle)" as tauriapp {
    component [React Frontend]
    component [Rust Backend]
    database "Tauri Store\n(local.db)" as localdb
  }
}

node "User's Browser\n(Chrome, Safari, Firefox)" as browser {
  component "Web App\n(Next.js SSR)" as webapp
}

' Cloud Infrastructure - Frontend
cloud "Vercel Edge Network" as vercel {
  node "CDN\n(Edge Locations)" as cdn {
    artifact "Static Assets\n(JS, CSS, Images)" as assets
    artifact "Server-Side Rendered Pages" as ssr
  }
}

' Cloud Infrastructure - Backend
cloud "Railway/Render\n(Cloud Platform)" as railway {
  node "API Server\n(Node.js)" as apiserver {
    component "Express/Hono\nREST API" as express
    component "Prisma ORM" as prisma
  }
  
  node "PostgreSQL\n(Supabase/Neon)" as postgres {
    database "keyflow_db" as db {
      [users]
      [sessions]
      [progress]
      [exercises]
    }
  }
  
  node "Redis\n(Upstash)" as redis {
    database "Cache" as cache {
      [session_cache]
      [user_cache]
    }
  }
}

' Authentication Service
cloud "Clerk/Supabase\n(Auth Provider)" as auth {
  component "Authentication\nService" as authsvc
}

' Object Storage
cloud "AWS S3 / Cloudflare R2" as objectstorage {
  database "Object Storage" as s3 {
    folder "exercises/" as exercises
    folder "exports/" as exports
    folder "backups/" as backups
  }
}

' Monitoring & Analytics
cloud "External Services" {
  node "Sentry" as sentry {
    component [Error Tracking]
    component [Performance Monitoring]
  }
  
  node "PostHog" as posthog {
    component [Product Analytics]
    component [Session Recordings]
  }
}

' Connections - Desktop App
mac --> apiserver : "HTTPS REST API\n(optional sync)"
mac --> authsvc : "Authentication\n(OAuth)"
localdb -[hidden]-> apiserver

' Connections - Web App
browser --> cdn : "HTTPS"
cdn --> webapp
webapp --> apiserver : "HTTPS REST API\n(required)"
webapp --> authsvc : "Authentication"

' Connections - Backend
apiserver --> postgres : "TCP 5432\n(SSL)"
apiserver --> redis : "TCP 6379\n(SSL)"
apiserver --> authsvc : "JWT Validation"
apiserver --> objectstorage : "HTTPS\n(S3 API)"
apiserver --> sentry : "Error Reports"
apiserver --> posthog : "Analytics Events"

prisma --> db : "Database Queries"

' Notes
note right of tauriapp
  <b>Desktop Deployment</b>
  
  <b>Distribution:</b>
  - Direct download (.dmg)
  - GitHub Releases
  - Auto-update via Tauri
  
  <b>Code Signing:</b>
  - Apple Developer Certificate
  - Notarization required
  
  <b>Bundle Size:</b> ~12 MB
  <b>Installation:</b> Drag to Applications
  
  <b>Local-First:</b>
  - 100% offline functional
  - Optional cloud sync
  - Data stored in Tauri Store
end note

note right of webapp
  <b>Web Deployment</b>
  
  <b>Hosting:</b> Vercel
  <b>Domain:</b> app.keyflow.com
  
  <b>Performance:</b>
  - Edge caching (CDN)
  - SSR for first paint
  - Code splitting
  - Image optimization
  
  <b>Deployment:</b>
  - Git push â†’ auto deploy
  - Preview deploys for PRs
  - Rollback support
end note

note bottom of apiserver
  <b>Backend Deployment</b>
  
  <b>Platform:</b> Railway or Render
  <b>Region:</b> US-West (primary)
  
  <b>Scaling:</b>
  - Horizontal auto-scaling
  - 2-10 instances based on load
  - Load balancer
  
  <b>Performance:</b>
  - <100ms response (p95)
  - 50+ concurrent users
  - 99.9% uptime SLA
  
  <b>Deployment:</b>
  - Docker container
  - GitHub Actions CI/CD
  - Zero-downtime deploys
end note

note bottom of postgres
  <b>Database</b>
  
  <b>Provider:</b> Supabase or Neon
  <b>Plan:</b> Pro tier
  
  <b>Specs:</b>
  - 2 vCPU, 4GB RAM
  - 50 GB storage
  - Daily backups
  
  <b>Features:</b>
  - Connection pooling
  - Read replicas (future)
  - Point-in-time recovery
  - SSL encryption
end note

note bottom of redis
  <b>Cache Layer</b>
  
  <b>Provider:</b> Upstash
  <b>Purpose:</b>
  - Session caching
  - User data caching
  - Leaderboards (future)
  
  <b>TTL:</b>
  - Sessions: 1 hour
  - User data: 5 minutes
  
  <b>Eviction:</b> LRU policy
end note

note as DeploymentFlow
  <b>Deployment Flow</b>
  
  <b>Desktop:</b>
  1. Git tag version
  2. GitHub Actions builds .dmg
  3. Code sign + notarize
  4. Upload to GitHub Releases
  5. Tauri updater checks for updates
  
  <b>Web:</b>
  1. Push to main branch
  2. Vercel auto-builds
  3. Deploy to production
  4. Edge cache invalidation
  
  <b>Backend:</b>
  1. Push to main branch
  2. GitHub Actions runs tests
  3. Build Docker image
  4. Deploy to Railway/Render
  5. Run migrations
  6. Health check
end note

note as MonitoringFlow
  <b>Monitoring & Observability</b>
  
  <b>Sentry:</b>
  - JavaScript errors (desktop + web)
  - Backend exceptions
  - Performance traces
  - User feedback
  
  <b>PostHog:</b>
  - Feature usage
  - User funnels
  - Session recordings
  - A/B testing
  
  <b>Alerts:</b>
  - API response time >200ms
  - Error rate >1%
  - Database connections >80%
  - Uptime <99.5%
end note

@enduml

